
@inproceedings{demetrescu_maintaining_2001,
	location = {Berlin, Heidelberg},
	title = {Maintaining Shortest Paths in Digraphs with Arbitrary Arc Weights: An Experimental Study},
	isbn = {978-3-540-44691-0},
	doi = {10.1007/3-540-44691-5_19},
	shorttitle = {Maintaining Shortest Paths in Digraphs with Arbitrary Arc Weights},
	abstract = {We present the first experimental study of the fully dynamic single-source shortest paths problem in digraphs with arbitrary (negative and non-negative) arc weights. We implemented and tested several variants of the theoretically fastest fully dynamic algorithms proposed in the literature, plus a new algorithm devised to be as simple as possible while matching the best worst-case bounds for the problem. According to experiments performed on randomly generated test sets, all the considered dynamic algorithms are faster by several orders of magnitude than recomputing from scratch with the best static algorithm. The experiments also reveal that, although the simple dynamic algorithm we suggest is usually the fastest in practice, other dynamic algorithms proposed in the literature yield better results for specific kinds of test sets.},
	pages = {218--229},
	booktitle = {Algorithm Engineering},
	publisher = {Springer},
	author = {Demetrescu, Camil and Frigioni, Daniele and Marchetti-Spaccamela, Alberto and Nanni, Umberto},
	editor = {Näher, Stefan and Wagner, Dorothea},
	date = {2001},
	langid = {english},
}

@article{brodal_strict_2025,
	title = {Strict Fibonacci Heaps},
	volume = {21},
	issn = {1549-6325, 1549-6333},
	url = {https://dl.acm.org/doi/10.1145/3707692},
	doi = {10.1145/3707692},
	abstract = {We present the
			  strict Fibonacci heap
			  , the first pointer-based heap implementation with time bounds matching those of Fibonacci heaps in the worst case. Strict Fibonacci heaps support make-heap, insert, find-min, meld and decrease-key in worst-case
			  
				{\textbackslash}(O(1){\textbackslash})
			  
			  time, and delete and delete-min in worst-case
			  
				{\textbackslash}(O({\textbackslash}lg n){\textbackslash})
			  
			  time, where
			  
				{\textbackslash}(n{\textbackslash})
			  
			  is the size of the heap. The data structure uses linear space.
			
			A previous solution achieving the same time bounds in the {RAM} model made essential use of arrays and extensive use of redundant counter schemes to maintain balance. Our solution uses neither. Our key simplification is to discard the structure of the smaller heap when doing a meld, and to use the pigeonhole principle in place of the redundant counter mechanism to maintain balance.},
	pages = {1--18},
	number = {2},
	journaltitle = {{ACM} Transactions on Algorithms},
	shortjournal = {{ACM} Trans. Algorithms},
	author = {Brodal, Gerth Stølting and Lagogiannis, George and Tarjan, Robert E.},
	urldate = {2025-04-09},
	date = {2025-04-30},
	langid = {english},
	file = {PDF:C\:\\Users\\lcs14\\Zotero\\storage\\R4ZLLN8T\\Brodal et al. - 2025 - Strict Fibonacci Heaps.pdf:application/pdf},
}

@inproceedings{brodal_strict_2012,
	location = {New York New York {USA}},
	title = {Strict fibonacci heaps},
	isbn = {978-1-4503-1245-5},
	url = {https://dl.acm.org/doi/10.1145/2213977.2214082},
	doi = {10.1145/2213977.2214082},
	eventtitle = {{STOC}'12: Symposium on Theory of Computing},
	pages = {1177--1184},
	booktitle = {Proceedings of the forty-fourth annual {ACM} symposium on Theory of computing},
	publisher = {{ACM}},
	author = {Brodal, Gerth Stølting and Lagogiannis, George and Tarjan, Robert E.},
	urldate = {2025-04-09},
	date = {2012-05-19},
	langid = {english},
}

@misc{anderson_lecture_2024,
  author    = {Anderson, Daniel and Li, Jason},
  title     = {Lecture 2: Concrete Models and Lower Bounds},
  year      = {2024},
  note      = {15-451/651: Design and Analysis of Algorithms, Carnegie Mellon University. Available at: \url{https://www.cs.cmu.edu/~15451-f24/notes.pdf} (accessed 2025-04-08)}
}

@book{goodman_handbook_2018,
	address = {Boca Raton London New York},
	edition = {Third edition},
	series = {Discrete mathematics and its applications},
	title = {Handbook of discrete and computational geometry},
	isbn = {978-1-4987-1139-5 978-1-351-64591-1},
	language = {eng},
	publisher = {CRC Press},
	editor = {Goodman, Jacob E. and O'Rourke, Joseph and Tóth, Csaba D.},
	year = {2018},
}

@article{tarjan_class_1979,
	title = {A class of algorithms which require nonlinear time to maintain disjoint sets},
	volume = {18},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {00220000},
	url = {https://linkinghub.elsevier.com/retrieve/pii/0022000079900424},
	doi = {10.1016/0022-0000(79)90042-4},
	language = {en},
	number = {2},
	urldate = {2024-12-10},
	journal = {Journal of Computer and System Sciences},
	author = {Tarjan, Robert Endre},
	month = apr,
	year = {1979},
	pages = {110--127},
}

@book{noauthor_design_1983,
	address = {Berlin/Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {The {Design} of {Dynamic} {Data} {Structures}},
	volume = {156},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-3-540-12330-9},
	url = {http://link.springer.com/10.1007/BFb0014927},
	language = {en},
	urldate = {2024-12-09},
	publisher = {Springer-Verlag},
	year = {1983},
	doi = {10.1007/BFb0014927},
}

@article{willard_new_1985,
	title = {New {Data} {Structures} for {Orthogonal} {Range} {Queries}},
	volume = {14},
	issn = {0097-5397, 1095-7111},
	url = {http://epubs.siam.org/doi/10.1137/0214019},
	doi = {10.1137/0214019},
	language = {en},
	number = {1},
	urldate = {2024-12-10},
	journal = {SIAM Journal on Computing},
	author = {Willard, Dan E.},
	month = feb,
	year = {1985},
	pages = {232--253},
}

@article{bentley_multidimensional_1980,
	title = {Multidimensional divide-and-conquer},
	volume = {23},
	issn = {0001-0782, 1557-7317},
	url = {https://dl.acm.org/doi/10.1145/358841.358850},
	doi = {10.1145/358841.358850},
	abstract = {Most results in the field of algorithm design are single algorithms that solve single problems. In this paper we discuss
			  multidimensional divide-and-conquer
			  , an algorithmic
			  paradigm
			  that can be instantiated in many different ways to yield a number of algorithms and data structures for multidimensional problems. We use this paradigm to give best-known solutions to such problems as the ECDF, maxima, range searching, closest pair, and all nearest neighbor problems. The contributions of the paper are on two levels. On the first level are the particular algorithms and data structures given by applying the paradigm. On the second level is the more novel contribution of this paper: a detailed study of an algorithmic paradigm that is specific enough to be described precisely yet general enough to solve a wide variety of problems.},
	language = {en},
	number = {4},
	urldate = {2024-12-10},
	journal = {Communications of the ACM},
	author = {Bentley, Jon Louis},
	month = apr,
	year = {1980},
	pages = {214--229},
	file = {Texto completo:C\:\\Users\\lucas\\Zotero\\storage\\PJTK2JVG\\Bentley - 1980 - Multidimensional divide-and-conquer.pdf:application/pdf},
}

@inproceedings{han_deterministic_2002,
	address = {Montreal Quebec Canada},
	title = {Deterministic sorting in \textit{{O}} ( \textit{n} log log \textit{n} ) time and linear space},
	isbn = {978-1-58113-495-7},
	url = {https://dl.acm.org/doi/10.1145/509907.509993},
	doi = {10.1145/509907.509993},
	language = {en},
	urldate = {2024-12-10},
	booktitle = {Proceedings of the thiry-fourth annual {ACM} symposium on {Theory} of computing},
	publisher = {ACM},
	author = {Han, Yijie},
	month = may,
	year = {2002},
	pages = {602--608},
}

@inproceedings{fredman_blasting_1990,
	address = {Baltimore, Maryland, United States},
	title = {{BLASTING} through the information theoretic barrier with {FUSION} {TREES}},
	isbn = {978-0-89791-361-4},
	url = {http://portal.acm.org/citation.cfm?doid=100216.100217},
	doi = {10.1145/100216.100217},
	language = {en},
	urldate = {2024-12-10},
	booktitle = {Proceedings of the twenty-second annual {ACM} symposium on {Theory} of computing  - {STOC} '90},
	publisher = {ACM Press},
	author = {Fredman, M. L. and Willard, D. E.},
	year = {1990},
	pages = {1--7},
	file = {Texto completo:C\:\\Users\\lucas\\Zotero\\storage\\46949QWL\\Fredman e Willard - 1990 - BLASTING through the information theoretic barrier with FUSION TREES.pdf:application/pdf},
}

@phdthesis{wilkinson_exploring_2015,
	type = {{PhD} {Thesis}},
	title = {Exploring the {Problem} {Space} of {Orthogonal} {Range} {Searching}},
	language = {English},
	school = {Department of Computer Science, Aarhus University},
	author = {Wilkinson, Bryan T.},
	year = {2015},
	annote = {Supervisors: Lars Arge and Peyman Afshani.},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\4NFZ9GS4\\Wilkinson - 2015 - Exploring the Problem Space of Orthogonal Range Searching.pdf:application/pdf},
}

@article{cherkassky_buckets_1999,
	title = {Buckets, {Heaps}, {Lists}, and {Monotone} {Priority} {Queues}},
	volume = {28},
	issn = {0097-5397, 1095-7111},
	url = {http://epubs.siam.org/doi/10.1137/S0097539796313490},
	doi = {10.1137/S0097539796313490},
	language = {en},
	number = {4},
	urldate = {2024-11-17},
	journal = {SIAM Journal on Computing},
	author = {Cherkassky, Boris V. and Goldberg, Andrew V. and Silverstein, Craig},
	month = jan,
	year = {1999},
	pages = {1326--1346},
}

@article{narvaez_new_2000,
	title = {New dynamic algorithms for shortest path tree computation},
	volume = {8},
	rights = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/{IEEE}.html},
	issn = {10636692},
	url = {http://ieeexplore.ieee.org/document/893870/},
	doi = {10.1109/90.893870},
	pages = {734--746},
	number = {6},
	journaltitle = {{IEEE}/{ACM} Transactions on Networking},
	shortjournal = {{IEEE}/{ACM} Trans. Networking},
	author = {Narvaez, P. and {Kai-Yeung Siu} and {Hong-Yi Tzeng}},
	urldate = {2024-09-18},
	date = {2000-12},
}

@article{ramalingam_computational_1996,
	title = {On the computational complexity of dynamic graph problems},
	volume = {158},
	issn = {0304-3975},
	url = {https://www.sciencedirect.com/science/article/pii/0304397595000798},
	doi = {10.1016/0304-3975(95)00079-8},
	abstract = {A common way to evaluate the time complexity of an algorithm is to use asymptotic worst-case analysis and to express the cost of the computation as a function of the size of the input. However, for an incremental algorithm this kind of analysis is sometimes not very informative. (By an “incremental algorithm”, we mean an algorithm for a dynamic problem.) When the cost of the computation is expressed as a function of the size of the (current) input, several incremental algorithms that have been proposed run in time asymptotically no better, in the worst-case, than the time required to perform the computation from scratch. Unfortunately, this kind of information is not very helpful if one wishes to compare different incremental algorithms for a given problem. This paper explores a different way to analyze incremental algorithms. Rather than express the cost of an incremental computation as a function of the size of the current input, we measure the cost in terms of the sum of the sizes of the changes in the input and the output. The change in approach allows us to develop a more informative theory of computational complexity for dynamic problems. An incremental algorithm is said to be bounded if the time taken by the algorithm to perform an update can be bounded by some function of the sum of the sizes of the changes in the input and the output. A dynamic problem is said to be unbounded with respect to a model of computation if it has no bounded incremental algorithm within that model of computation. The paper presents new upper-bound results as well as new lower-bound results with respect to a class of algorithms called the locally persistent algorithms. Our results, together with some previously known ones, shed light on the organization of the complexity hierarchy that exists when dynamic problems are classified according to their incremental complexity with respect to locally persistent algorithms. In particular, these results separate the classes of polynomially bounded problems, inherently exponentially bounded problems, and unbounded problems.},
	pages = {233--277},
	number = {1},
	journaltitle = {Theoretical Computer Science},
	shortjournal = {Theoretical Computer Science},
	author = {Ramalingam, G. and Reps, Thomas},
	urldate = {2024-09-11},
	date = {1996-05-20},
	file = {On the computational complexity of dynamic graph problems.pdf:C\:\\Users\\lucas\\Zotero\\storage\\K32CHP7N\\On the computational complexity of dynamic graph problems.pdf:application/pdf},
}

@report{ramalingam_computational_1991,
	title = {On the Computational Complexity of Incremental Algorithms},
	url = {https://minds.wisconsin.edu/handle/1793/59496},
	institution = {University of Wisconsin-Madison Department of Computer Sciences},
	type = {Technical Report},
	author = {Ramalingam, G. and Reps, Thomas},
	urldate = {2024-09-10},
	date = {1991},
	langid = {english},
	file = {On the Computational Complexity of Incremental Algorithms.pdf:C\:\\Users\\lucas\\Zotero\\storage\\4QE6KK8U\\On the Computational Complexity of Incremental Algorithms.pdf:application/pdf},
}

@incollection{goos_space_2001,
	location = {Berlin, Heidelberg},
	title = {A Space Saving Trick for Directed Dynamic Transitive Closure and Shortest Path Algorithms},
	volume = {2108},
	isbn = {978-3-540-42494-9 978-3-540-44679-8},
	url = {http://link.springer.com/10.1007/3-540-44679-6_30},
	pages = {268--277},
	booktitle = {Computing and Combinatorics},
	publisher = {Springer Berlin Heidelberg},
	author = {King, Valerie and Thorup, Mikkel},
	editor = {Wang, Jie},
	editorb = {Goos, Gerhard and Hartmanis, Juris and Van Leeuwen, Jan},
	editorbtype = {redactor},
	urldate = {2024-09-09},
	date = {2001},
	langid = {english},
	doi = {10.1007/3-540-44679-6_30},
}

@article{arslan_dynamic_2019,
	title = {Dynamic Physarum Solver: a bio-inspired shortest path method of dynamically changing graphs},
	issn = {1303-6203},
	url = {https://journals.tubitak.gov.tr/elektrik/vol27/iss2/57},
	doi = {10.3906/elk-1811-46},
	shorttitle = {Dynamic Physarum Solver},
	abstract = {In dynamic graphs, edge weights of the graph change with time and solving the shortest path problem in such graphs is an important real-world problem. The studies in the literature require excessive computational time for computing the dynamic shortest path since determining changing edge weights is difficult especially when the graph size becomes large. In this paper, we propose a dynamic bio-inspired algorithm for finding the dynamic shortest path for large graphs based on Physarum Solver, which is a shortest path algorithm for static graphs. The proposed method is evaluated using three different large graph models representing diverse real-life applications. The effect of changing edge weights on the solution time is evaluated for each graph model separately and compared against ∆-stepping, which is the most representative implementation of Dijkstra’s algorithm. Experimental results show that the proposed method easily adapts edge weight changes and computes the dynamic shortest path efficiently.},
	pages = {1489--1503},
	journaltitle = {{TURKISH} {JOURNAL} {OF} {ELECTRICAL} {ENGINEERING} \& {COMPUTER} {SCIENCES}},
	shortjournal = {Turk J Elec Eng \& Comp Sci},
	author = {Arslan, Hi̇Lal},
	urldate = {2024-09-09},
	date = {2019-03-01},
	langid = {english},
	file = {Dynamic Physarum Solver - a bio-inspired shortest path method of dynamically changing graphs.pdf:C\:\\Users\\lucas\\Zotero\\storage\\3XBHPINX\\Dynamic Physarum Solver - a bio-inspired shortest path method of dynamically changing graphs.pdf:application/pdf},
}

@article{hong_disk-based_2017,
	title = {Disk-based shortest path discovery using distance index over large dynamic graphs},
	volume = {382-383},
	issn = {00200255},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0020025516320308},
	doi = {10.1016/j.ins.2016.12.013},
	pages = {201--215},
	journaltitle = {Information Sciences},
	shortjournal = {Information Sciences},
	author = {Hong, Jihye and Park, Kisung and Han, Yongkoo and Rasel, Mostofa Kamal and Vonvou, Dawanga and Lee, Young-Koo},
	urldate = {2024-09-09},
	date = {2017-03},
	langid = {english},
	file = {Paper - Disk-based shortest path discovery using distance index over large dynamic graphs.pdf:C\:\\Users\\lucas\\Zotero\\storage\\F8RUFPF2\\Paper - Disk-based shortest path discovery using distance index over large dynamic graphs.pdf:application/pdf},
}

@incollection{moscibroda_dynamically_2013,
	location = {Cham},
	title = {Dynamically Maintaining Shortest Path Trees under Batches of Updates},
	volume = {8179},
	rights = {http://www.springer.com/tdm},
	isbn = {978-3-319-03577-2 978-3-319-03578-9},
	url = {http://link.springer.com/10.1007/978-3-319-03578-9_24},
	pages = {286--297},
	booktitle = {Structural Information and Communication Complexity},
	publisher = {Springer International Publishing},
	author = {D’Andrea, Annalisa and D’Emidio, Mattia and Frigioni, Daniele and Leucci, Stefano and Proietti, Guido},
	editor = {Moscibroda, Thomas and Rescigno, Adele A.},
	urldate = {2024-09-09},
	date = {2013},
	doi = {10.1007/978-3-319-03578-9_24},
	file = {Dynamically Maintaining Shortest Path Trees.pdf:C\:\\Users\\lucas\\Zotero\\storage\\Z2IKHHUW\\Dynamically Maintaining Shortest Path Trees.pdf:application/pdf},
}

@article{buriol_speeding_2008,
	title = {Speeding Up Dynamic Shortest-Path Algorithms},
	volume = {20},
	issn = {1091-9856, 1526-5528},
	url = {https://pubsonline.informs.org/doi/10.1287/ijoc.1070.0231},
	doi = {10.1287/ijoc.1070.0231},
	abstract = {Dynamic shortest-path algorithms update the shortest paths taking into account a change in an arc weight. This paper describes a new generic technique that allows the reduction of heap sizes used by several dynamic single-destination shortest-path algorithms. For unit weight changes, the updates can be done without heaps. These reductions almost always reduce the computational times for these algorithms. In computational testing, several dynamic shortest-path algorithms with and without the heap-reduction technique are compared. Speedups of up to a factor of 1.8 were observed using the heap-reduction technique on random weight changes and of over a factor of five on unit weight changes. We compare as well with Dijkstra's algorithm, which recomputes the paths from scratch. With respect to Dijkstra's algorithm, speedups of up to five orders of magnitude are observed.},
	pages = {191--204},
	number = {2},
	journaltitle = {{INFORMS} Journal on Computing},
	shortjournal = {{INFORMS} Journal on Computing},
	author = {Buriol, Luciana S. and Resende, Mauricio G. C. and Thorup, Mikkel},
	urldate = {2024-09-09},
	date = {2008-05},
	langid = {english},
	file = {Slide - Speeding Up Dynamic Shortest-Path Algorithms.pdf:C\:\\Users\\lucas\\Zotero\\storage\\74CSAQQ2\\Slide - Speeding Up Dynamic Shortest-Path Algorithms.pdf:application/pdf;Speeding Up Dynamic Shortest-Path Algorithms.pdf:C\:\\Users\\lucas\\Zotero\\storage\\EA9KJ3Q7\\Speeding Up Dynamic Shortest-Path Algorithms.pdf:application/pdf;Speeding Up Dynamic Shortest-Path Algorithms2.pdf:C\:\\Users\\lucas\\Zotero\\storage\\TBFBC5XK\\Speeding Up Dynamic Shortest-Path Algorithms2.pdf:application/pdf},
}

@article{ferone_shortest_2017,
	title = {{SHORTEST} {PATHS} {ON} {DYNAMIC} {GRAPHS}: A {SURVEY}},
	volume = {37},
	issn = {0101-7438, 1678-5142},
	url = {https://www.scielo.br/j/pope/a/4wW8NxrqJcLbp5DkjNP6Qwj/?lang=en},
	doi = {10.1590/0101-7438.2017.037.03.0487},
	shorttitle = {{SHORTEST} {PATHS} {ON} {DYNAMIC} {GRAPHS}},
	abstract = {{ABSTRACT} This paper provides an overview of the state-of-the art and the current research trends concerning shortest paths problem on dynamic graphs. The discussion is divided in two main topics: reoptimization and time-dependent shortest paths. Reoptimization consists in the solution of a sequence of shortest path problems in which each instance slightly differs from the previous one. The reoptimization tackles this problem wisely using information stored in an optimal solution previously computed. On the other hand, shortest path problems on time-dependent graphs are characterized by a weight function which not only depends upon the arcs but changes in time according to a certain time horizon.},
	pages = {487--508},
	journaltitle = {Pesquisa Operacional},
	shortjournal = {Pesqui. Oper.},
	author = {Ferone, Daniele and Festa, Paola and Napoletano, Antonio and Pastore, Tommaso},
	urldate = {2024-09-09},
	date = {2017-12},
	langid = {english},
	keywords = {Auction Method, Labelling methods, Network Flows, Network Optimization, Shortest Path, Structure path constraints},
}

@article{festa_shortest_2022,
	title = {Shortest path reoptimization vs resolution from scratch: a computational comparison},
	volume = {37},
	issn = {1055-6788, 1029-4937},
	url = {https://www.tandfonline.com/doi/full/10.1080/10556788.2021.1895153},
	doi = {10.1080/10556788.2021.1895153},
	shorttitle = {Shortest path reoptimization vs resolution from scratch},
	pages = {1122--1144},
	number = {3},
	journaltitle = {Optimization Methods and Software},
	shortjournal = {Optimization Methods and Software},
	author = {Festa, Paola and Fugaro, Serena and Guerriero, Francesca},
	urldate = {2024-09-09},
	date = {2022-05-04},
	langid = {english},
	file = {Shortest path reoptimization vs resolution from scratch  a computational comparison.pdf:C\:\\Users\\lucas\\Zotero\\storage\\XIVAKW4S\\Shortest path reoptimization vs resolution from scratch  a computational comparison.pdf:application/pdf},
}

@article{hanauer_recent_2022,
	title = {Recent Advances in Fully Dynamic Graph Algorithms – A Quick Reference Guide},
	volume = {27},
	issn = {1084-6654},
	url = {https://doi.org/10.1145/3555806},
	doi = {10.1145/3555806},
	abstract = {In recent years, significant advances have been made in the design and analysis of fully dynamic algorithms. However, these theoretical results have received very little attention from the practical perspective. Few of the algorithms are implemented and tested on real datasets, and their practical potential is far from understood. Here, we present a quick reference guide to recent engineering and theory results in the area of fully dynamic graph algorithms.},
	pages = {1.11:1--1.11:45},
	journaltitle = {{ACM} J. Exp. Algorithmics},
	author = {Hanauer, Kathrin and Henzinger, Monika and Schulz, Christian},
	urldate = {2024-09-04},
	date = {2022-12-13},
	file = {survey.pdf:C\:\\Users\\lucas\\Zotero\\storage\\SEXI5K4Z\\survey.pdf:application/pdf},
}

@article{navarro_predecessor_2020,
	title = {Predecessor Search},
	volume = {53},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/3409371},
	doi = {10.1145/3409371},
	abstract = {The predecessor problem is a key component of the fundamental sorting-and-searching core of algorithmic problems. While binary search is the optimal solution in the comparison model, more realistic machine models on integer sets open the door to a rich universe of data structures, algorithms, and lower bounds. In this article, we review the evolution of the solutions to the predecessor problem, focusing on the important algorithmic ideas, from the famous data structure of van Emde Boas to the optimal results of Patrascu and Thorup. We also consider lower bounds, variants, and special cases, as well as the remaining open questions.},
	pages = {105:1--105:35},
	number = {5},
	journaltitle = {{ACM} Comput. Surv.},
	author = {Navarro, Gonzalo and Rojas-Ledesma, Javiel},
	urldate = {2024-09-02},
	date = {2020-09-28},
	file = {Predecessor-Search (1).pdf:C\:\\Users\\lucas\\Zotero\\storage\\SUMSH35T\\Predecessor-Search (1).pdf:application/pdf},
}

@article{de_andrade_junior_estruturas_2020,
	title = {Estruturas de Dados Retroativas: um Mapeamento Sistemático},
	volume = {10},
	issn = {2237-2903},
	url = {https://revistas.unifacs.br/index.php/rsc/article/view/6071},
	doi = {10.36558/rsc.v10i2.6071},
	shorttitle = {{ESTRUTURAS} {DE} {DADOS} {RETROATIVAS}},
	abstract = {Face à miniaturização dos aparelhos eletrônicos e devido àquantidade de dados processados por eles, as aplicaçõesdesenvolvidas necessitam ser eficientes em termos de consumo dememória e complexidade temporal. Estruturas de dadosretroativas são estruturas em que é possível realizar umamodificação no passado e observar o efeito dessa modificação emsua linha temporal. Essas estruturas são utilizadas em algunsproblemas geométricos e em outros relacionados a grafos, como oproblema do caminho mínimo em grafos dinâmicos. Contudo, aimplementação dessas estruturas de maneira otimizada nemsempre é trivial. Diante desse cenário, este trabalho apresenta osresultados de uma pesquisa relacionada a estruturas de dadosretroativas, visando comparar o desempenho das implementaçõespropostas por variados autores em relação às implementaçõestriviais dessas estruturas. O método de pesquisa adotado foi oestudo dos artigos relacionados às estruturas de dados retroativas,a partir de um mapeamento sistemático, e a análise dedesempenho dessas estruturas codificadas na linguagem C++. Asestruturas identificadas nesse mapeamento apresentaram melhoresresultados no que tange ao consumo de espaço e tempo deprocessamento com relação às suas implementações por forçabruta, porém, em alguns casos, com constantes altas.},
	number = {2},
	journaltitle = {Revista de Sistemas e Computação - {RSC}},
	author = {de Andrade Júnior, José Wagner and Seabra, Rodrigo Duarte and de Souza, Adler Diniz},
	urldate = {2024-08-28},
	date = {2020-08-19},
	langid = {portuguese},
	keywords = {Dinamização de Algoritmos, Dynamization of Algorithms, Estruturas de Dados Retroativas, Mapeamento Sistemático, Retroactive Data Structures, Retroactivity, Retroatividade, Systematic Mapping},
	file = {de Andrade Júnior et al. - 2020 - Estruturas de Dados Retroativas um Mapeamento Sistemático.pdf:C\:\\Users\\lucas\\Zotero\\storage\\ZVFXX8NT\\de Andrade Júnior et al. - 2020 - Estruturas de Dados Retroativas um Mapeamento Sistemático.pdf:application/pdf},
}

@article{junior_estruturas_2020,
	title = {Estruturas de dados retroativas: aplicações na dinamização de algoritmos},
	rights = {Acesso Aberto},
	url = {https://repositorio.unifei.edu.br/jspui/handle/123456789/2330},
	shorttitle = {Estruturas de dados retroativas},
	abstract = {The retroactivity in programming is the study of a modification in a timeline for a data structure and the effects that this modification exerts throughout its existence. In general, 
the analysis and implementation tend to be more costly computationally, because a modification 
on these data structure in the past can generate a cascade effect through all the data 
structure timeline. The concept of retroactivity generates tools and structures that optimize 
the solutions facing these temporal problems. This type of data structure can be used in, 
for example, shortest path algorithms, security applications, and geometric problems. In 
this thesis, we have the theoretical subsidies about these data structures, a detailed material 
about the implementation of this structures, using retroactivity, and the implementation of 
some problems that retroactivity can be used, for example, the fully dynamic minimum 
spanning tree problem. For each data structure, we executed practical tests about this data 
retroactive data structures and a comparison between these solutions and other approaches. 
The tests showed that the retroactive implementations proposed by Demaine et. al (2007) 
[13] obtained the best results from a temporal point of view. It was proposed two algorithms 
which used the retroactivity concepts inside its development: the fully retroactive minimum 
spanning tree and the single source dynamic shortest path problem in dynamic graphs. Let m 
be data structure’s timeline, V(G) and A(G) the sets of vertices and edges from graph G. We 
reached an amortized time complexity O( 
√ 
m· lg {\textbar}V(G){\textbar}) per query/update operation in the 
fully retroactive minimum spanning tree algorithm. The algorithm to solve the single source 
dynamic shortest path problem in dynamic graphs proposed by Sunita et. al [52] obtained 
a time complexity O({\textbar}A(G){\textbar} · lg {\textbar}V(G){\textbar}) per modification using a non-oblivious retroactive 
priority queue.},
	author = {Júnior, Andrade and De, José Wagner},
	urldate = {2024-08-28},
	date = {2020-06-09},
	file = {Júnior and De - 2020 - Estruturas de dados retroativas aplicações na dinamização de algoritmos.pdf:C\:\\Users\\lucas\\Zotero\\storage\\C4XEJRN9\\Júnior and De - 2020 - Estruturas de dados retroativas aplicações na dinamização de algoritmos.pdf:application/pdf},
}

@article{sunita_dynamizing_2021,
	title = {Dynamizing Dijkstra: A solution to dynamic shortest path problem through retroactive priority queue},
	volume = {33},
	issn = {13191578},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1319157817303828},
	doi = {10.1016/j.jksuci.2018.03.003},
	shorttitle = {Dynamizing Dijkstra},
	pages = {364--373},
	number = {3},
	journaltitle = {Journal of King Saud University - Computer and Information Sciences},
	shortjournal = {Journal of King Saud University - Computer and Information Sciences},
	author = {{Sunita} and Garg, Deepak},
	urldate = {2024-07-22},
	date = {2021-03},
	langid = {english},
	file = {Sunita and Garg - 2021 - Dynamizing Dijkstra A solution to dynamic shortest path problem through retroactive priority queue.pdf:C\:\\Users\\lucas\\Zotero\\storage\\XJ3S867P\\Sunita and Garg - 2021 - Dynamizing Dijkstra A solution to dynamic shortest path problem through retroactive priority queue.pdf:application/pdf},
}

@inproceedings{li_scaling_2019,
	location = {New York, {NY}, {USA}},
	title = {Scaling Distance Labeling on Small-World Networks},
	isbn = {978-1-4503-5643-5},
	url = {https://doi.org/10.1145/3299869.3319877},
	doi = {10.1145/3299869.3319877},
	series = {{SIGMOD} '19},
	abstract = {Distance labeling approaches are widely adopted to speed up the online performance of shortest distance queries. The construction of the distance labeling, however, can be exhaustive especially on big graphs. For a major category of large graphs, small-world networks, the state-of-the-art approach is Pruned Landmark Labeling ({PLL}). {PLL} prunes distance labels based on a node order and directly constructs the pruned labels by performing breadth-first searches in the node order. The pruning technique, as well as the index construction, has a strong sequential nature which hinders {PLL} from being parallelized. It becomes an urgent issue on massive small-world networks whose index can hardly be constructed by a single thread within a reasonable time. This paper scales distance labeling on small-world networks by proposing a Parallel Shortest-distance Labeling ({PSL}) scheme and further reducing the index size by exploiting graph and label properties. {PSL} insightfully converts the {PLL}'s node-order dependency to a shortest-distance dependence, which leads to a propagation-based parallel labeling in D rounds where D denotes the diameter of the graph. Extensive experimental results verify our efficiency on billion-scale graphs and near-linear speedup in a multi-core environment.},
	pages = {1060--1077},
	booktitle = {Proceedings of the 2019 International Conference on Management of Data},
	publisher = {Association for Computing Machinery},
	author = {Li, Wentao and Qiao, Miao and Qin, Lu and Zhang, Ying and Chang, Lijun and Lin, Xuemin},
	urldate = {2024-07-21},
	date = {2019-06-25},
	file = {PSL_SLIDES_2019.pdf:C\:\\Users\\lucas\\Zotero\\storage\\KTC3XGTV\\PSL_SLIDES_2019.pdf:application/pdf;Scaling Distance Labeling on Small-World Networks.pdf:C\:\\Users\\lucas\\Zotero\\storage\\EDU27A7D\\Scaling Distance Labeling on Small-World Networks.pdf:application/pdf},
}

@inproceedings{farhan_batchhl_2022,
	location = {New York, {NY}, {USA}},
	title = {{BatchHL}: Answering Distance Queries on Batch-Dynamic Networks at Scale},
	isbn = {978-1-4503-9249-5},
	url = {https://doi.org/10.1145/3514221.3517883},
	doi = {10.1145/3514221.3517883},
	series = {{SIGMOD} '22},
	shorttitle = {{BatchHL}},
	abstract = {Many real-world applications operate on dynamic graphs that undergo rapid changes in their topological structure over time. However, it is challenging to design dynamic algorithms that are capable of supporting such graph changes efficiently. To circumvent the challenge, we propose a batch-dynamic framework for answering distance queries, which combines offline labelling and online searching to leverage the advantages from both sides - accelerating query processing through a partial distance labelling that is of limited size but provides a good approximation to bound online searches. We devise batch-dynamic algorithms to dynamize a distance labelling efficiently in order to reflect batch updates on the underlying graph. In addition to providing theoretical analysis for the correctness, labelling minimality, and computational complexity, we have conducted experiments on 14 real-world networks to empirically verify the efficiency and scalability of the proposed algorithms.},
	pages = {2020--2033},
	booktitle = {Proceedings of the 2022 International Conference on Management of Data},
	publisher = {Association for Computing Machinery},
	author = {Farhan, Muhammad and Wang, Qing and Koehler, Henning},
	urldate = {2024-07-21},
	date = {2022-06-11},
	file = {3514221.3517883.pdf:C\:\\Users\\lucas\\Zotero\\storage\\WMUFWAE5\\3514221.3517883.pdf:application/pdf},
}

@article{wu_shortest_2012,
	title = {Shortest path and distance queries on road networks: an experimental evaluation},
	volume = {5},
	issn = {2150-8097},
	url = {https://doi.org/10.14778/2140436.2140438},
	doi = {10.14778/2140436.2140438},
	shorttitle = {Shortest path and distance queries on road networks},
	abstract = {Computing the shortest path between two given locations in a road network is an important problem that finds applications in various map services and commercial navigation products. The state-of-the-art solutions for the problem can be divided into two categories: spatial-coherence-based methods and vertex-importance-based approaches. The two categories of techniques, however, have not been compared systematically under the same experimental framework, as they were developed from two independent lines of research that do not refer to each other. This renders it difficult for a practitioner to decide which technique should be adopted for a specific application. Furthermore, the experimental evaluation of the existing techniques, as presented in previous work, falls short in several aspects. Some methods were tested only on small road networks with up to one hundred thousand vertices; some approaches were evaluated using distance queries (instead of shortest path queries), namely, queries that ask only for the length of the shortest path; a state-of-the-art technique was examined based on a faulty implementation that led to incorrect query results.To address the above issues, this paper presents a comprehensive comparison of the most advanced spatial-coherence-based and vertex-importance-based approaches. Using a variety of real road networks with up to twenty million vertices, we evaluated each technique in terms of its preprocessing time, space consumption, and query efficiency (for both shortest path and distance queries). Our experimental results reveal the characteristics of different techniques, based on which we provide guidelines on selecting appropriate methods for various scenarios.},
	pages = {406--417},
	number = {5},
	journaltitle = {Proc. {VLDB} Endow.},
	author = {Wu, Lingkun and Xiao, Xiaokui and Deng, Dingxiong and Cong, Gao and Zhu, Andy Diwen and Zhou, Shuigeng},
	urldate = {2024-07-20},
	date = {2012-01-01},
	file = {wu-vldb12.pdf:C\:\\Users\\lucas\\Zotero\\storage\\4BJUVNNR\\wu-vldb12.pdf:application/pdf},
}

@inproceedings{ouyang_when_2018,
	location = {New York, {NY}, {USA}},
	title = {When Hierarchy Meets 2-Hop-Labeling: Efficient Shortest Distance Queries on Road Networks},
	isbn = {978-1-4503-4703-7},
	url = {https://doi.org/10.1145/3183713.3196913},
	doi = {10.1145/3183713.3196913},
	series = {{SIGMOD} '18},
	shorttitle = {When Hierarchy Meets 2-Hop-Labeling},
	abstract = {Computing the shortest distance between two vertices is a fundamental problem in road networks. Since a direct search using the Dijkstra's algorithm results in a large search space, researchers resort to indexing-based approaches. State-of-the-art indexing-based solutions can be categorized into hierarchy-based solutions and hopbased solutions. However, the hierarchy-based solutions require a large search space for long-distance queries while the hop-based solutions result in a high computational waste for short-distance queries. To overcome the drawbacks of both solutions, in this paper, we propose a novel hierarchical 2-hop index (H2H-Index) which assigns a label for each vertex and at the same time preserves a hierarchy among all vertices. With the H2H-Index, we design an efficient query processing algorithm with performance guarantees by visiting part of the labels for the source and destination based on the vertex hierarchy. We also propose an algorithm to construct the H2H-Index based on distance preserved graphs. The algorithm is further optimized by computing the labels based on the partially computed labels of other vertices. We conducted extensive performance studies using large real road networks including the whole {USA} road network. The experimental results demonstrate that our approach can achieve a speedup of an order of magnitude in query processing compared to the state-of-the-art while consuming comparable indexing time and index size.},
	pages = {709--724},
	booktitle = {Proceedings of the 2018 International Conference on Management of Data},
	publisher = {Association for Computing Machinery},
	author = {Ouyang, Dian and Qin, Lu and Chang, Lijun and Lin, Xuemin and Zhang, Ying and Zhu, Qing},
	urldate = {2024-07-13},
	date = {2018-05-27},
	file = {When_hierarchy_meets_2-hop-labeling_efficient_shor.pdf:C\:\\Users\\lucas\\Zotero\\storage\\TK26J4AQ\\When_hierarchy_meets_2-hop-labeling_efficient_shor.pdf:application/pdf},
}

@inproceedings{akiba_fast_2013,
	location = {New York, {NY}, {USA}},
	title = {Fast exact shortest-path distance queries on large networks by pruned landmark labeling},
	isbn = {978-1-4503-2037-5},
	url = {https://doi.org/10.1145/2463676.2465315},
	doi = {10.1145/2463676.2465315},
	series = {{SIGMOD} '13},
	abstract = {We propose a new exact method for shortest-path distance queries on large-scale networks. Our method precomputes distance labels for vertices by performing a breadth-first search from every vertex. Seemingly too obvious and too inefficient at first glance, the key ingredient introduced here is pruning during breadth-first searches. While we can still answer the correct distance for any pair of vertices from the labels, it surprisingly reduces the search space and sizes of labels. Moreover, we show that we can perform 32 or 64 breadth-first searches simultaneously exploiting bitwise operations. We experimentally demonstrate that the combination of these two techniques is efficient and robust on various kinds of large-scale real-world networks. In particular, our method can handle social networks and web graphs with hundreds of millions of edges, which are two orders of magnitude larger than the limits of previous exact methods, with comparable query time to those of previous methods.},
	pages = {349--360},
	booktitle = {Proceedings of the 2013 {ACM} {SIGMOD} International Conference on Management of Data},
	publisher = {Association for Computing Machinery},
	author = {Akiba, Takuya and Iwata, Yoichi and Yoshida, Yuichi},
	urldate = {2024-07-13},
	date = {2013-06-22},
	file = {1304.4661v1.pdf:C\:\\Users\\lucas\\Zotero\\storage\\SCFDW5PK\\1304.4661v1.pdf:application/pdf},
}

@article{zhang_experimental_2021,
	title = {An experimental evaluation and guideline for path finding in weighted dynamic network},
	volume = {14},
	issn = {2150-8097},
	url = {https://doi.org/10.14778/3476249.3476267},
	doi = {10.14778/3476249.3476267},
	abstract = {Shortest path computation is a building block of various network applications. Since real-life networks evolve as time passes, the Dynamic Shortest Path ({DSP}) problem has drawn lots of attention in recent years. However, as {DSP} has many factors related to network topology, update patterns, and query characteristics, existing works only test their algorithms on limited situations without sufficient comparisons with other approaches. Thus, it is still hard to choose the most suitable method in practice. To this end, we first identify the determinant dimensions and constraint dimensions of the {DSP} problem and create a complete problem space to cover all possible situations. Then we evaluate the state-of-the-art {DSP} methods under the same implementation standard and test them systematically under a set of synthetic dynamic networks. Furthermore, we propose the concept of dynamic degree to classify the dynamic environments and use throughput to evaluate their performance. These results can serve as a guideline to find the best solution for each situation during system implementation and also identify research opportunities. Finally, we validate our findings on real-life dynamic networks.},
	pages = {2127--2140},
	number = {11},
	journaltitle = {Proc. {VLDB} Endow.},
	author = {Zhang, Mengxuan and Li, Lei and Zhou, Xiaofang},
	urldate = {2024-07-13},
	date = {2021-07-01},
	file = {p2127-zhang (1).pdf:C\:\\Users\\lucas\\Zotero\\storage\\WWH2MH6M\\p2127-zhang (1).pdf:application/pdf},
}

@article{farhan_batchhl_2024,
	title = {{BatchHL}\$\${\textasciicircum}\{+\}\$\$: batch dynamic labelling for distance queries on large-scale networks},
	volume = {33},
	issn = {0949-877X},
	url = {https://doi.org/10.1007/s00778-023-00799-9},
	doi = {10.1007/s00778-023-00799-9},
	shorttitle = {{BatchHL}\$\${\textasciicircum}\{+\}\$\$},
	abstract = {Many real-world applications operate on dynamic graphs to perform important tasks. In this article, we study batch-dynamic algorithms that are capable of updating distance labelling efficiently in order to reflect the effects of rapid changes on such graphs. To explore the full pruning potentials, we first characterize the minimal set of vertices being affected by batch updates. Then, we reveal patterns of interactions among different updates (edge insertions and edge deletions) and leverage them to design pruning rules for reducing update search space. These interesting findings lead us to developing a new batch-dynamic method, called {BatchHL}\$\${\textasciicircum}+\$\$, which can dynamize labelling for distance queries much more efficiently than existing work. We provide formal proofs for the correctness and minimality of {BatchHL}\$\${\textasciicircum}+\$\$which are non-trivial and require a delicate analysis of patterns of interactions. Empirically, we have evaluated the performance of {BatchHL}\$\${\textasciicircum}+\$\$on 15 real-world networks. The results show that {BatchHL}\$\${\textasciicircum}+\$\$significantly outperforms the state-of-the-art methods with up to 3 orders of magnitude faster in reflecting updates of rapidly changing graphs for distance queries.},
	pages = {101--129},
	number = {1},
	journaltitle = {The {VLDB} Journal},
	shortjournal = {The {VLDB} Journal},
	author = {Farhan, Muhammad and Koehler, Henning and Wang, Qing},
	urldate = {2024-07-13},
	date = {2024-01-01},
	langid = {english},
	keywords = {2-Hop cover, Batch-dynamic graphs, Distance labelling maintenance, Graph algorithms, High-way cover, Shortest-path distance},
	file = {s00778-023-00799-9 (4).pdf:C\:\\Users\\lucas\\Zotero\\storage\\M4CNMDIE\\s00778-023-00799-9 (4).pdf:application/pdf},
}

@article{chan_shortest_2009,
	title = {Shortest Path Tree Computation in Dynamic Graphs},
	volume = {58},
	rights = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/{IEEE}.html},
	issn = {0018-9340},
	url = {http://ieeexplore.ieee.org/document/4663055/},
	doi = {10.1109/TC.2008.198},
	pages = {541--557},
	number = {4},
	journaltitle = {{IEEE} Transactions on Computers},
	shortjournal = {{IEEE} Trans. Comput.},
	author = {Chan, E.P.F. and {Yaya Yang}},
	urldate = {2024-09-18},
	date = {2009-04},
}

@inproceedings{zhang_improvement_2013,
	location = {, China},
	title = {Improvement And Experimental Evaluation Bellman-Ford Algorithm},
	isbn = {978-90-78677-79-6},
	url = {http://www.atlantis-press.com/php/paper-details.php?id=8809},
	doi = {10.2991/icaicte.2013.29},
	eventtitle = {2013 International Conference on Advanced {ICT}},
	booktitle = {Proceedings of the 2013 International Conference on Advanced {ICT}},
	publisher = {Atlantis Press},
	author = {Zhang, Wei and Chen, Hao and Jiang, Chong and Zhu, Lin},
	urldate = {2024-09-18},
	date = {2013},
	langid = {english},
}

@article{fanding_faster_1994,
	title = {A faster algorithm for shortest-path–{SPFA}},
	volume = {2},
	pages = {2},
	number = {9},
	journaltitle = {Journal of Southwest Jiaotong University},
	author = {Fanding, Duan},
	date = {1994},
}

@article{singh_parallel_2019,
	title = {Parallel batch dynamic single source shortest path algorithm and its implementation on {GPU} based machine.},
	volume = {16},
	pages = {217--225},
	number = {2},
	journaltitle = {Int. Arab J. Inf. Technol.},
	author = {Singh, Dhirendra and Khare, Nilay},
	date = {2019},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\BZU6W44V\\Singh e Khare - 2019 - Parallel batch dynamic single source shortest path algorithm and its implementation on GPU based mac.pdf:application/pdf},
}

@thesis{larsen_models_2013,
	title = {Models and techniques for proving data structure lower bounds},
	institution = {Citeseer},
	type = {phdthesis},
	author = {Larsen, Kasper Green},
	date = {2013},
}

@inproceedings{lev-ari_constructive_2015,
	title = {A constructive approach for proving data structures’ linearizability},
	pages = {356--370},
	booktitle = {Distributed Computing: 29th International Symposium, {DISC} 2015, Tokyo, Japan, October 7-9, 2015, Proceedings 29},
	publisher = {Springer},
	author = {Lev-Ari, Kfir and Chockler, Gregory and Keidar, Idit},
	date = {2015},
}

@incollection{goos_two_2002,
	location = {Berlin, Heidelberg},
	title = {Two Simplified Algorithms for Maintaining Order in a List},
	volume = {2461},
	isbn = {978-3-540-44180-9 978-3-540-45749-7},
	url = {http://link.springer.com/10.1007/3-540-45749-6_17},
	pages = {152--164},
	booktitle = {Algorithms — {ESA} 2002},
	publisher = {Springer Berlin Heidelberg},
	author = {Bender, Michael A. and Cole, Richard and Demaine, Erik D. and Farach-Colton, Martin and Zito, Jack},
	editor = {Möhring, Rolf and Raman, Rajeev},
	editorb = {Goos, Gerhard and Hartmanis, Juris and Van Leeuwen, Jan},
	editorbtype = {redactor},
	urldate = {2024-09-23},
	date = {2002},
	doi = {10.1007/3-540-45749-6_17},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\R6DXKHVL\\Bender et al. - 2002 - Two Simplified Algorithms for Maintaining Order in a List.pdf:application/pdf},
}

@incollection{brodnik_survey_2013,
	location = {Berlin, Heidelberg},
	title = {A Survey on Priority Queues},
	volume = {8066},
	isbn = {978-3-642-40272-2 978-3-642-40273-9},
	url = {http://link.springer.com/10.1007/978-3-642-40273-9_11},
	pages = {150--163},
	booktitle = {Space-Efficient Data Structures, Streams, and Algorithms},
	publisher = {Springer Berlin Heidelberg},
	author = {Brodal, Gerth Stølting},
	editor = {Brodnik, Andrej and López-Ortiz, Alejandro and Raman, Venkatesh and Viola, Alfredo},
	urldate = {2024-09-23},
	date = {2013},
	doi = {10.1007/978-3-642-40273-9_11},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Brodal - 2013 - A Survey on Priority Queues.pdf:C\:\\Users\\lucas\\Zotero\\storage\\AHY8NZG6\\Brodal - 2013 - A Survey on Priority Queues.pdf:application/pdf},
}

@article{fleischer_simple_1996,
	title = {A simple balanced search tree with O (1) worst-case update time},
	volume = {7},
	pages = {137--149},
	number = {2},
	journaltitle = {International Journal of Foundations of Computer Science},
	author = {Fleischer, Rudolf},
	date = {1996},
	note = {Publisher: World Scientific},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\B5T9BJER\\Fleischer - 1996 - A simple balanced search tree with O (1) worst-case update time.pdf:application/pdf},
}

@article{keshav_how_2007,
	title = {How to read a paper},
	volume = {37},
	issn = {0146-4833},
	url = {https://dl.acm.org/doi/10.1145/1273445.1273458},
	doi = {10.1145/1273445.1273458},
	abstract = {Researchers spend a great deal of time reading research papers. However, this skill is rarely taught, leading to much wasted effort. This article outlines a practical and efficient
              three-pass method
              for reading research papers. I also describe how to use this method to do a literature survey.},
	pages = {83--84},
	number = {3},
	journaltitle = {{ACM} {SIGCOMM} Computer Communication Review},
	shortjournal = {{SIGCOMM} Comput. Commun. Rev.},
	author = {Keshav, S.},
	urldate = {2024-10-03},
	date = {2007-07-20},
	langid = {english},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\TMTGG89Y\\Keshav - 2007 - How to read a paper.pdf:application/pdf},
}

@book{cormen_introduction_2022,
	title = {Introduction to algorithms},
	publisher = {{MIT} press},
	author = {Cormen, Thomas H and Leiserson, Charles E and Rivest, Ronald L and Stein, Clifford},
	date = {2022},
}

@incollection{goos_priority_1996,
	location = {Berlin, Heidelberg},
	title = {Priority queues: Small, monotone and trans-dichotomous},
	volume = {1136},
	isbn = {978-3-540-61680-1 978-3-540-70667-0},
	url = {http://link.springer.com/10.1007/3-540-61680-2_51},
	shorttitle = {Priority queues},
	pages = {121--137},
	booktitle = {Algorithms — {ESA} '96},
	publisher = {Springer Berlin Heidelberg},
	author = {Raman, Rajeev},
	editor = {Diaz, Josep and Serna, Maria},
	editorb = {Goos, Gerhard and Hartmanis, Juris and Leeuwen, Jan},
	editorbtype = {redactor},
	urldate = {2024-10-07},
	date = {1996},
	doi = {10.1007/3-540-61680-2_51},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\EW5QEJWU\\Raman - 1996 - Priority queues Small, monotone and trans-dichotomous.pdf:application/pdf},
}

@article{de_andrade_junior_fully_2022,
	title = {Fully Retroactive Minimum Spanning Tree Problem},
	volume = {65},
	rights = {https://academic.oup.com/journals/pages/open\_access/funder\_policies/chorus/standard\_publication\_model},
	issn = {0010-4620, 1460-2067},
	url = {https://academic.oup.com/comjnl/article/65/4/973/6012628},
	doi = {10.1093/comjnl/bxaa135},
	abstract = {Abstract
            This article describes an algorithm that solves a fully dynamic variant of the minimum spanning tree ({MST}) problem. The fully retroactive {MST} allows adding an edge to time \$t\$, or to obtain the current {MST} at time \$t\$. By using the square root technique and a data structure link-cut tree, it was possible to obtain an algorithm that runs each query in \$O({\textbackslash}sqrt\{m\} {\textbackslash}lg\{{\textbar}V(G){\textbar}\})\$ amortized, in which \${\textbar}V(G){\textbar}\$ is the number of nodes in graph \$G\$ and \$m\$ is the size of the timeline. We use a different approach to solve the {MST} problem instead of the standard algorithms, such as Prim or Kruskal, and this allows using the square root technique to improve the final complexity of the algorithm. Our empirical analysis shows that the proposed algorithm runs faster than re-executing the standard algorithms, and this difference only increases when the number of nodes in these graphs is larger.},
	pages = {973--982},
	number = {4},
	journaltitle = {The Computer Journal},
	author = {De Andrade Júnior, José Wagner and Duarte Seabra, Rodrigo},
	urldate = {2024-10-09},
	date = {2022-04-19},
	langid = {english},
	file = {De Andrade Júnior e Duarte Seabra - 2022 - Fully Retroactive Minimum Spanning Tree Problem.pdf:C\:\\Users\\lucas\\Zotero\\storage\\6YSSDQUX\\De Andrade Júnior e Duarte Seabra - 2022 - Fully Retroactive Minimum Spanning Tree Problem.pdf:application/pdf},
}

@article{fernandes_partial_nodate,
	title = {{FROM} {PARTIAL} {TO} {FULL} {RETROACTIVITY} {WITHOUT} {THE} {USE} {OF} A {PERSISTENT} {DATA} {STRUCTURE}},
	author = {Fernandes, Cristina G and Noronha, Felipe C},
	langid = {english},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\9MD9XRYR\\Fernandes e Noronha - FROM PARTIAL TO FULL RETROACTIVITY WITHOUT THE USE OF A PERSISTENT DATA STRUCTURE.pdf:application/pdf},
}

@article{binary_heap_1964,
	title = {Algorithm 232: Heapsort},
	volume = {7},
	doi = {https://doi.org/10.1145/512274.512284},
	pages = {347--348},
	number = {6},
	journaltitle = {Communications of the {ACM}},
	author = {Williams, J. W. J.},
	date = {1964},
	keywords = {2012 heap kde seminar cited\_in\_sortpaper sorting},
}

@inproceedings{brodal_queue_1996,
	location = {{USA}},
	title = {Worst-case efficient priority queues},
	isbn = {0-89871-366-8},
	series = {{SODA} '96},
	pages = {52--58},
	booktitle = {Proceedings of the Seventh Annual {ACM}-{SIAM} Symposium on Discrete Algorithms},
	publisher = {Society for Industrial and Applied Mathematics},
	author = {Brodal, Gerth Stølting},
	date = {1996},
	note = {event-place: Atlanta, Georgia, {USA}},
	file = {PDF:C\:\\Users\\lcs14\\Zotero\\storage\\LCYFX3P4\\Brodal - 1996 - Worst-case efficient priority queues.pdf:application/pdf},
}

@article{carrera-rivera_how-conduct_2022,
	title = {How-to conduct a systematic literature review: A quick guide for computer science research},
	volume = {9},
	issn = {22150161},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S2215016122002746},
	doi = {10.1016/j.mex.2022.101895},
	shorttitle = {How-to conduct a systematic literature review},
	pages = {101895},
	journaltitle = {{MethodsX}},
	shortjournal = {{MethodsX}},
	author = {Carrera-Rivera, Angela and Ochoa, William and Larrinaga, Felix and Lasa, Ganix},
	urldate = {2024-10-10},
	date = {2022},
	langid = {english},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\DRYMNQC6\\Carrera-Rivera et al. - 2022 - How-to conduct a systematic literature review A quick guide for computer science research.pdf:application/pdf},
}

@article{rangarajan_retroactive_2023,
	title = {Retroactive data structure for protein–protein interaction in lung cancer using Dijkstra algorithm},
	issn = {2511-2104, 2511-2112},
	url = {https://link.springer.com/10.1007/s41870-023-01557-4},
	doi = {10.1007/s41870-023-01557-4},
	journaltitle = {International Journal of Information Technology},
	shortjournal = {Int. j. inf. tecnol.},
	author = {Rangarajan, Prasanna Kumar and Gurusamy, Bharathi Mohan and Rajasekar, Elakkiya and Ippatapu Venkata, Srisurya and Chereddy, Spandana},
	urldate = {2024-10-11},
	date = {2023-12-22},
	langid = {english},
	file = {Rangarajan et al. - 2023 - Retroactive data structure for protein–protein interaction in lung cancer using Dijkstra algorithm.pdf:C\:\\Users\\lucas\\Zotero\\storage\\BPC83GEZ\\Rangarajan et al. - 2023 - Retroactive data structure for protein–protein interaction in lung cancer using Dijkstra algorithm.pdf:application/pdf},
}

@incollection{lubiw_upper_2021,
	location = {Cham},
	title = {Upper and Lower Bounds for Fully Retroactive Graph Problems},
	volume = {12808},
	isbn = {978-3-030-83507-1 978-3-030-83508-8},
	url = {https://link.springer.com/10.1007/978-3-030-83508-8_34},
	pages = {471--484},
	booktitle = {Algorithms and Data Structures},
	publisher = {Springer International Publishing},
	author = {Henzinger, Monika and Wu, Xiaowei},
	editor = {Lubiw, Anna and Salavatipour, Mohammad and He, Meng},
	urldate = {2024-10-11},
	date = {2021},
	langid = {english},
	doi = {10.1007/978-3-030-83508-8_34},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Henzinger e Wu - 2021 - Upper and Lower Bounds for Fully Retroactive Graph Problems.pdf:C\:\\Users\\lucas\\Zotero\\storage\\CAPQ9Z4X\\Henzinger e Wu - 2021 - Upper and Lower Bounds for Fully Retroactive Graph Problems.pdf:application/pdf},
}

@incollection{asano_fully_2011,
	location = {Berlin, Heidelberg},
	title = {Fully Retroactive Approximate Range and Nearest Neighbor Searching},
	volume = {7074},
	isbn = {978-3-642-25590-8 978-3-642-25591-5},
	url = {http://link.springer.com/10.1007/978-3-642-25591-5_31},
	pages = {292--301},
	booktitle = {Algorithms and Computation},
	publisher = {Springer Berlin Heidelberg},
	author = {Goodrich, Michael T. and Simons, Joseph A.},
	editor = {Asano, Takao and Nakano, Shin-ichi and Okamoto, Yoshio and Watanabe, Osamu},
	urldate = {2024-10-11},
	date = {2011},
	doi = {10.1007/978-3-642-25591-5_31},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Goodrich e Simons - 2011 - Fully Retroactive Approximate Range and Nearest Neighbor Searching.pdf:C\:\\Users\\lucas\\Zotero\\storage\\PVBZT2W6\\Goodrich e Simons - 2011 - Fully Retroactive Approximate Range and Nearest Neighbor Searching.pdf:application/pdf},
}

@incollection{hutchison_cloning_2010,
	location = {Berlin, Heidelberg},
	title = {Cloning Voronoi Diagrams via Retroactive Data Structures},
	volume = {6346},
	isbn = {978-3-642-15774-5 978-3-642-15775-2},
	url = {http://link.springer.com/10.1007/978-3-642-15775-2_31},
	pages = {362--373},
	booktitle = {Algorithms – {ESA} 2010},
	publisher = {Springer Berlin Heidelberg},
	author = {Dickerson, Matthew T. and Eppstein, David and Goodrich, Michael T.},
	editor = {De Berg, Mark and Meyer, Ulrich},
	editorb = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard},
	editorbtype = {redactor},
	urldate = {2024-10-11},
	date = {2010},
	doi = {10.1007/978-3-642-15775-2_31},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Dickerson et al. - 2010 - Cloning Voronoi Diagrams via Retroactive Data Structures.pdf:C\:\\Users\\lucas\\Zotero\\storage\\K9LKWILH\\Dickerson et al. - 2010 - Cloning Voronoi Diagrams via Retroactive Data Structures.pdf:application/pdf},
}

@inproceedings{bringmann_negative-weight_2023,
	location = {Santa Cruz, {CA}, {USA}},
	title = {Negative-Weight Single-Source Shortest Paths in Near-Linear Time: Now Faster!},
	rights = {https://doi.org/10.15223/policy-029},
	isbn = {9798350318944},
	url = {https://ieeexplore.ieee.org/document/10353144/},
	doi = {10.1109/FOCS57990.2023.00038},
	shorttitle = {Negative-Weight Single-Source Shortest Paths in Near-Linear Time},
	eventtitle = {2023 {IEEE} 64th Annual Symposium on Foundations of Computer Science ({FOCS})},
	pages = {515--538},
	booktitle = {2023 {IEEE} 64th Annual Symposium on Foundations of Computer Science ({FOCS})},
	publisher = {{IEEE}},
	author = {Bringmann, Karl and Cassis, Alejandro and Fischer, Nick},
	urldate = {2024-10-14},
	date = {2023-11-06},
	file = {Submitted Version:C\:\\Users\\lucas\\Zotero\\storage\\MGVPPRMM\\Bringmann et al. - 2023 - Negative-Weight Single-Source Shortest Paths in Near-Linear Time Now Faster!.pdf:application/pdf},
}

@article{thorup_undirected_1999,
	title = {Undirected single-source shortest paths with positive integer weights in linear time},
	volume = {46},
	issn = {0004-5411, 1557-735X},
	url = {https://dl.acm.org/doi/10.1145/316542.316548},
	doi = {10.1145/316542.316548},
	abstract = {The single-source shortest paths problem ({SSSP}) is one of the classic problems in algorithmic graph theory: given a positively weighted graph
              G
              with a source vertex
              s
              , find the shortest path from
              s
              to all other vertices in the graph.
            
            
              Since 1959, all theoretical developments in {SSSP} for general directed and undirected graphs have been based on Dijkstra's algorithm, visiting the vertices in order of increasing distance from
              s
              . Thus, any implementation of Dijkstra's algorithm sorts the vertices according to their distances from
              s
              . However, we do not know how to sort in linear time.
            
            Here, a deterministic linear time and linear space algorithm is presented for the undirected single  source shortest paths problem with positive integer weights. The algorithm avoids the sorting bottleneck by building a hierarchical bucketing structure, identifying vertex pairs that may be visited in any order.},
	pages = {362--394},
	number = {3},
	journaltitle = {Journal of the {ACM}},
	shortjournal = {J. {ACM}},
	author = {Thorup, Mikkel},
	urldate = {2024-10-14},
	date = {1999-05},
	langid = {english},
	file = {Full Text:C\:\\Users\\lucas\\Zotero\\storage\\F4X4BIR8\\Thorup - 1999 - Undirected single-source shortest paths with positive integer weights in linear time.pdf:application/pdf},
}

@inproceedings{duan_randomized_2023,
	location = {Santa Cruz, {CA}, {USA}},
	title = {A Randomized Algorithm for Single-Source Shortest Path on Undirected Real-Weighted Graphs},
	rights = {https://doi.org/10.15223/policy-029},
	isbn = {9798350318944},
	url = {https://ieeexplore.ieee.org/document/10353179/},
	doi = {10.1109/FOCS57990.2023.00035},
	eventtitle = {2023 {IEEE} 64th Annual Symposium on Foundations of Computer Science ({FOCS})},
	pages = {484--492},
	booktitle = {2023 {IEEE} 64th Annual Symposium on Foundations of Computer Science ({FOCS})},
	publisher = {{IEEE}},
	author = {Duan, Ran and Mao, Jiayi and Shu, Xinkai and Yin, Longhui},
	urldate = {2024-10-14},
	date = {2023-11-06},
	file = {Submitted Version:C\:\\Users\\lucas\\Zotero\\storage\\NGWRUAFE\\Duan et al. - 2023 - A Randomized Algorithm for Single-Source Shortest Path on Undirected Real-Weighted Graphs.pdf:application/pdf},
}

@inproceedings{barcellos_uma_2010,
	title = {Uma estratégia para medição de software e avaliação de bases de medidas para controle estatístico de processos de software em organizações de alta maturidade},
	pages = {409--423},
	booktitle = {Anais do {IX} Simpósio Brasileiro de Qualidade de Software},
	publisher = {{SBC}},
	author = {Barcellos, Monalessa Perini and Rocha, Ana Regina and de Almeida Falbo, Ricardo},
	date = {2010},
}

@article{junior_fully_2020,
	title = {Fully Retroactive Priority Queues using Persistent Binary Search Trees},
	volume = {16},
	issn = {1549-3636},
	url = {http://thescipub.com/abstract/10.3844/jcssp.2020.906.915},
	doi = {10.3844/jcssp.2020.906.915},
	pages = {906--915},
	number = {7},
	journaltitle = {Journal of Computer Science},
	shortjournal = {Journal of Computer Science},
	author = {Junior, {JoseWagner} De Andrade and Seabra, Rodrigo Duarte},
	urldate = {2024-10-17},
	date = {2020-07-01},
	file = {Junior e Seabra - 2020 - Fully Retroactive Priority Queues using Persistent Binary Search Trees.pdf:C\:\\Users\\lucas\\Zotero\\storage\\ZFQQZND9\\Junior e Seabra - 2020 - Fully Retroactive Priority Queues using Persistent Binary Search Trees.pdf:application/pdf},
}

@article{giora_optimal_2009,
	title = {Optimal dynamic vertical ray shooting in rectilinear planar subdivisions},
	volume = {5},
	issn = {1549-6325, 1549-6333},
	url = {https://dl.acm.org/doi/10.1145/1541885.1541889},
	doi = {10.1145/1541885.1541889},
	abstract = {We consider the dynamic vertical ray shooting problem against horizontal disjoint segments, that is, the task of maintaining a dynamic set
              S
              of
              n
              nonintersecting horizontal line segments in the plane under a query that reports the first segment in
              S
              intersecting a vertical ray from a query point. We develop a linear-size structure that supports queries, insertions, and deletion in
              O
              (log
              n
              ) worst-case time. Our structure works in the comparison model on a random access machine.},
	pages = {1--51},
	number = {3},
	journaltitle = {{ACM} Transactions on Algorithms},
	shortjournal = {{ACM} Trans. Algorithms},
	author = {Giora, Yoav and Kaplan, Haim},
	urldate = {2024-10-17},
	date = {2009-07},
	langid = {english},
	file = {Giora e Kaplan - 2009 - Optimal dynamic vertical ray shooting in rectilinear planar subdivisions.pdf:C\:\\Users\\lucas\\Zotero\\storage\\SSEL3MXH\\Giora e Kaplan - 2009 - Optimal dynamic vertical ray shooting in rectilinear planar subdivisions.pdf:application/pdf},
}

@inproceedings{acodad_extended_2012,
	location = {Athens},
	title = {Extended Partial-Order Dynamic Backtracking Algorithm for Dynamically Changed Environments},
	isbn = {978-1-4799-0227-9 978-0-7695-4915-6},
	url = {http://ieeexplore.ieee.org/document/6495096/},
	doi = {10.1109/ICTAI.2012.83},
	eventtitle = {2012 {IEEE} 24th International Conference on Tools with Artificial Intelligence ({ICTAI} 2012)},
	pages = {580--587},
	booktitle = {2012 {IEEE} 24th International Conference on Tools with Artificial Intelligence},
	publisher = {{IEEE}},
	author = {Acodad, Y. and Benelallam, I. and Hammoujan, S. and Bouyakhf, E. H.},
	urldate = {2024-10-17},
	date = {2012-11},
	file = {Acodad et al. - 2012 - Extended Partial-Order Dynamic Backtracking Algorithm for Dynamically Changed Environments.pdf:C\:\\Users\\lucas\\Zotero\\storage\\F8HXBCFJ\\Acodad et al. - 2012 - Extended Partial-Order Dynamic Backtracking Algorithm for Dynamically Changed Environments.pdf:application/pdf},
}

@article{da_silva_multi-objective_2023,
	title = {Multi-Objective Decision-Making Meets Dynamic Shortest Path: Challenges and Prospects},
	volume = {16},
	rights = {https://creativecommons.org/licenses/by/4.0/},
	issn = {1999-4893},
	url = {https://www.mdpi.com/1999-4893/16/3/162},
	doi = {10.3390/a16030162},
	shorttitle = {Multi-Objective Decision-Making Meets Dynamic Shortest Path},
	abstract = {The Shortest Path ({SP}) problem resembles a variety of real-world situations where one needs to find paths between origins and destinations. A generalization of the {SP} is the Dynamic Shortest Path ({DSP}) problem, which also models changes in the graph at any time. When a graph changes, {DSP} algorithms partially recompute the paths while taking advantage of the previous computations. Although the {DSP} problem represents many real situations, it leaves out some fundamental aspects of decision-making. One of these aspects is the existence of multiple, potentially conflicting objectives that must be optimized simultaneously. Recently, we performed a first incursion on the so-called Multi-Objective Dynamic Shortest Path ({MODSP}), presenting the first algorithm able to take the {MODM} perspective into account when solving a {DSP} problem. In this paper, we go beyond and formally define the {MODSP} problem, thus establishing and clarifying it with respect to its simpler counterparts. In particular, we start with a brief overview of the related literature and then present a complete formalization of the {MODSP} problem class, highlighting its distinguishing features as compared to similar problems and representing their relationship through a novel taxonomy. This work also motivates the relevance of the {MODSP} problem by enumerating real-world scenarios that involve all its ingredients, such as multiple objectives and dynamically updated graph topologies. Finally, we discuss the challenges and open questions for this new class of shortest path problems, aiming at future work directions. We hope this work sheds light on the theme and contributes to leveraging relevant research on the topic.},
	pages = {162},
	number = {3},
	journaltitle = {Algorithms},
	shortjournal = {Algorithms},
	author = {Da Silva, Juarez Machado and Ramos, Gabriel De Oliveira and Barbosa, Jorge Luis Victória},
	urldate = {2024-10-17},
	date = {2023-03-16},
	langid = {english},
	file = {Da Silva et al. - 2023 - Multi-Objective Decision-Making Meets Dynamic Shortest Path Challenges and Prospects.pdf:C\:\\Users\\lucas\\Zotero\\storage\\PEYAG4HG\\Da Silva et al. - 2023 - Multi-Objective Decision-Making Meets Dynamic Shortest Path Challenges and Prospects.pdf:application/pdf},
}

@article{chung_lower_2022,
	title = {Lower Bounds on Retroactive Data Structures},
	volume = {248},
	rights = {Creative Commons Attribution 4.0 International license, info:eu-repo/semantics/{openAccess}},
	issn = {1868-8969},
	url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ISAAC.2022.32},
	doi = {10.4230/LIPICS.ISAAC.2022.32},
	abstract = {We prove essentially optimal fine-grained lower bounds on the gap between a data structure and a partially retroactive version of the same data structure. Precisely, assuming any one of three standard conjectures, we describe a problem that has a data structure where operations run in O(T(n,m)) time per operation, but any partially retroactive version of that data structure requires T(n,m)⋅m{\textasciicircum}\{1-o(1)\} worst-case time per operation, where n is the size of the data structure at any time and m is the number of operations. Any data structure with operations running in O(T(n,m)) time per operation can be converted (via the "rollback method") into a partially retroactive data structure running in O(T(n,m)⋅m) time per operation, so our lower bound is tight up to an m{\textasciicircum}o(1) factor common in fine-grained complexity.},
	pages = {32:1--32:12},
	journaltitle = {{LIPIcs}, Volume 248, {ISAAC} 2022},
	author = {Chung, Lily and Demaine, Erik D. and Hendrickson, Dylan and Lynch, Jayson},
	editora = {Bae, Sang Won and Park, Heejin},
	editoratype = {collaborator},
	urldate = {2024-10-22},
	date = {2022},
	langid = {english},
	note = {Artwork Size: 12 pages, 807163 bytes
{ISBN}: 9783959772587
Medium: application/pdf
Publisher: Schloss Dagstuhl – Leibniz-Zentrum für Informatik},
	keywords = {Retroactivity, fine-grained complexity, rollback, Theory of computation → Cell probe models and lower bounds, time travel},
	file = {Rangarajan et al. - 2023 - Retroactive data structure for protein–protein interaction in lung cancer using Dijkstra algorithm.pdf:C\:\\Users\\lucas\\Zotero\\storage\\C4KSIF4W\\Chung et al. - 2022 - Lower Bounds on Retroactive Data Structures.pdf:application/pdf},
}

@article{chen_nearly_2018,
	title = {Nearly Optimal Separation Between Partially and Fully Retroactive Data Structures},
	volume = {101},
	rights = {Creative Commons Attribution 3.0 Unported license, info:eu-repo/semantics/{openAccess}},
	issn = {1868-8969},
	url = {https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.SWAT.2018.33},
	doi = {10.4230/LIPICS.SWAT.2018.33},
	abstract = {Since the introduction of retroactive data structures at {SODA} 2004, a major unsolved problem has been to bound the gap between the best partially retroactive data structure (where changes can be made to the past, but only the present can be queried) and the best fully retroactive data structure (where the past can also be queried) for any problem. It was proved in 2004 that any partially retroactive data structure with operation time T\_\{op\}(n,m) can be transformed into a fully retroactive data structure with operation time O(sqrt\{m\} * T\_\{op\}(n,m)), where n is the size of the data structure and m is the number of operations in the timeline [Demaine et al., 2004]. But it has been open for 14 years whether such a gap is necessary.
In this paper, we prove nearly matching upper and lower bounds on this gap for all n and m. We improve the upper bound for n {\textless}{\textless} sqrt m by showing a new transformation with multiplicative overhead n log m. We then prove a lower bound of min \{n log m, sqrt m\}{\textasciicircum}\{1-o(1)\} assuming any of the following conjectures:
- Conjecture I: Circuit {SAT} requires 2{\textasciicircum}\{n - o(n)\} time on n-input circuits of size 2{\textasciicircum}\{o(n)\}. This conjecture is far weaker than the well-believed {SETH} conjecture from complexity theory, which asserts that {CNF} {SAT} with n variables and O(n) clauses already requires 2{\textasciicircum}\{n-o(n)\} time.
- Conjecture {II}: Online (min,+) product between an integer n x n matrix and n vectors requires n{\textasciicircum}\{3 - o(1)\} time. This conjecture is weaker than the {APSP} conjectures widely used in fine-grained complexity.
- Conjecture {III} (3-{SUM} Conjecture): Given three sets A,B,C of integers, each of size n, deciding whether there exist a in A, b in B, c in C such that a + b + c = 0 requires n{\textasciicircum}\{2 - o(1)\} time. This 1995 conjecture [Anka Gajentaan and Mark H. Overmars, 1995] was the first conjecture in fine-grained complexity.
Our lower bound construction illustrates an interesting power of fully retroactive queries: they can be used to quickly solve batched pair evaluation. We believe this technique can prove useful for other data structure lower bounds, especially dynamic ones.},
	pages = {33:1--33:12},
	journaltitle = {{LIPIcs}, Volume 101, {SWAT} 2018},
	author = {Chen, Lijie and Demaine, Erik D. and Gu, Yuzhou and Williams, Virginia Vassilevska and Xu, Yinzhan and Yu, Yuancheng},
	editora = {Eppstein, David},
	editoratype = {collaborator},
	urldate = {2024-10-22},
	date = {2018},
	langid = {english},
	note = {Artwork Size: 12 pages, 510103 bytes
{ISBN}: 9783959770682
Medium: application/pdf
Publisher: Schloss Dagstuhl – Leibniz-Zentrum für Informatik},
	keywords = {conditional lower bound, retroactive data structure},
	file = {Chen et al. - 2018 - Nearly Optimal Separation Between Partially and Fully Retroactive Data Structures.pdf:C\:\\Users\\lucas\\Zotero\\storage\\5489W53K\\Chen et al. - 2018 - Nearly Optimal Separation Between Partially and Fully Retroactive Data Structures.pdf:application/pdf},
}

@incollection{dehne_polylogarithmic_2015,
	location = {Cham},
	title = {Polylogarithmic Fully Retroactive Priority Queues via Hierarchical Checkpointing},
	volume = {9214},
	isbn = {978-3-319-21839-7 978-3-319-21840-3},
	url = {https://link.springer.com/10.1007/978-3-319-21840-3_22},
	pages = {263--275},
	booktitle = {Algorithms and Data Structures},
	publisher = {Springer International Publishing},
	author = {Demaine, Erik D. and Kaler, Tim and Liu, Quanquan and Sidford, Aaron and Yedidia, Adam},
	editor = {Dehne, Frank and Sack, Jörg-Rüdiger and Stege, Ulrike},
	urldate = {2024-10-21},
	date = {2015},
	langid = {english},
	doi = {10.1007/978-3-319-21840-3_22},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Demaine et al. - 2015 - Polylogarithmic Fully Retroactive Priority Queues via Hierarchical Checkpointing.pdf:C\:\\Users\\lucas\\Zotero\\storage\\GTSMBRXA\\Demaine et al. - 2015 - Polylogarithmic Fully Retroactive Priority Queues via Hierarchical Checkpointing.pdf:application/pdf},
}

@inproceedings{blelloch_space-efficient_2008,
	location = {{USA}},
	title = {Space-efficient dynamic orthogonal point location, segment intersection, and range reporting},
	series = {{SODA} '08},
	abstract = {We describe an asymptotically optimal data-structure for dynamic point location for horizontal segments. For n line-segments, queries take O(log n) time, updates take O(log n) amortized time and the data structure uses O(n) space. This is the first structure for the problem that is optimal in space and time (modulo the possibility of removing amortization). We also describe dynamic data structures for orthogonal range reporting and orthogonal intersection reporting. In both data structures for n points (segments) updates take O(log n) amortized time, queries take O(log n+k log n/log log n) time, and the structures use O(n) space, where k is the size of the output. The model of computation is the unit cost {RAM}.},
	pages = {894--903},
	booktitle = {Proceedings of the Nineteenth Annual {ACM}-{SIAM} Symposium on Discrete Algorithms},
	publisher = {Society for Industrial and Applied Mathematics},
	author = {Blelloch, Guy E.},
	date = {2008},
	note = {event-place: San Francisco, California},
	file = {Blelloch - 2008 - Space-efficient dynamic orthogonal point location, segment intersection, and range reporting.pdf:C\:\\Users\\lucas\\Zotero\\storage\\VWD7AKZK\\Blelloch - 2008 - Space-efficient dynamic orthogonal point location, segment intersection, and range reporting.pdf:application/pdf},
}

@article{de_noronha_link-cut_nodate,
	title = {Link-cut trees e aplicações em estruturas de dados retroativas},
	author = {de Noronha, Felipe Castro and Fernandes, Cristina Gomes},
}

@inproceedings{agarwal_implementation_2012,
	title = {Implementation, Analysis and Application of Retroactive Data Structures},
	isbn = {978-981-07-1403-1},
	url = {http://rpsonline.com.sg/proceedings/9789810714031/html/978-981-07-1403-1_247.xml},
	doi = {10.3850/978-981-07-1403-1_247},
	eventtitle = {Proceedings of the International Conference on Advances in Computer Science and Electronics Engineering},
	pages = {88--92},
	booktitle = {Proceedings of the International Conference on Advances in Computer Science and Electronics Engineering},
	publisher = {Research Publishing Services},
	author = {Agarwal, Suneeta and Panwaria, Prakhar},
	urldate = {2024-10-21},
	date = {2012},
	langid = {english},
}

@article{demaine_retroactive_2007,
	title = {Retroactive data structures},
	volume = {3},
	issn = {1549-6325, 1549-6333},
	url = {https://dl.acm.org/doi/10.1145/1240233.1240236},
	doi = {10.1145/1240233.1240236},
	abstract = {We introduce a new data structuring paradigm in which operations can be performed on a data structure not only in the present, but also in the past. In this new paradigm, called
              retroactive data structures
              , the historical sequence of operations performed on the data structure is not fixed. The data structure allows arbitrary insertion and deletion of operations at arbitrary times, subject only to consistency requirements. We initiate the study of retroactive data structures by formally defining the model and its variants. We prove that, unlike persistence, efficient retroactivity is not always achievable. Thus, we present efficient retroactive data structures for queues, doubly ended queues, priority queues, union-find, and decomposable search structures.},
	pages = {13},
	number = {2},
	journaltitle = {{ACM} Transactions on Algorithms},
	shortjournal = {{ACM} Trans. Algorithms},
	author = {Demaine, Erik D. and Iacono, John and Langerman, Stefan},
	urldate = {2024-10-21},
	date = {2007-05},
	langid = {english},
	file = {Demaine et al. - 2007 - Retroactive data structures.pdf:C\:\\Users\\lucas\\Zotero\\storage\\6JZXG9NB\\Demaine et al. - 2007 - Retroactive data structures.pdf:application/pdf},
}

@inproceedings{thorup_integer_2003,
	address = {San Diego CA USA},
	title = {Integer priority queues with decrease key in constant time and the single source shortest paths problem},
	isbn = {978-1-58113-674-6},
	url = {https://dl.acm.org/doi/10.1145/780542.780566},
	doi = {10.1145/780542.780566},
	language = {en},
	urldate = {2024-11-24},
	booktitle = {Proceedings of the thirty-fifth annual {ACM} symposium on {Theory} of computing},
	publisher = {ACM},
	author = {Thorup, Mikkel},
	month = jun,
	year = {2003},
	pages = {149--158},
}

@misc{swperfi,
  author = {Rosiane de Freitas (Coord.)},
  title = {Técnicas de Inteligência Artificial para Análise e Otimização de Desempenho de Software - SWPERFI},
  publisher={Projeto de PD&I - IComp/UFAM e MOTOROLA/FLEX},
  howpublished = "\url{https://www.swperfi.icomp.ufam.edu.br/}",
  year = {2024}
}

@article{brodnik_worst_2005,
	title = {Worst case constant time priority queue},
	volume = {78},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121204002018},
	doi = {10.1016/j.jss.2004.09.002},
	language = {en},
	number = {3},
	urldate = {2024-12-12},
	journal = {Journal of Systems and Software},
	author = {Brodnik, Andrej and Carlsson, Svante and Fredman, Michael L. and Karlsson, Johan and Munro, J. Ian},
	month = dec,
	year = {2005},
	pages = {249--256},
	file = {Versão submetida:C\:\\Users\\lucas\\Zotero\\storage\\8D5ZJ5K6\\Brodnik et al. - 2005 - Worst case constant time priority queue.pdf:application/pdf},
}

@article{fredman_surpassing_1993,
	title = {Surpassing the information theoretic bound with fusion trees},
	volume = {47},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {00220000},
	url = {https://linkinghub.elsevier.com/retrieve/pii/0022000093900404},
	doi = {10.1016/0022-0000(93)90040-4},
	language = {en},
	number = {3},
	urldate = {2024-12-12},
	journal = {Journal of Computer and System Sciences},
	author = {Fredman, Michael L. and Willard, Dan E.},
	month = dec,
	year = {1993},
	pages = {424--436},
}

@misc{costa_exploring_2024,
	title = {Exploring {Monotone} {Priority} {Queues} for {Dijkstra} {Optimization}},
	copyright = {Creative Commons Attribution 4.0 International},
	url = {https://arxiv.org/abs/2409.06061},
	doi = {10.48550/ARXIV.2409.06061},
	abstract = {This paper presents a comprehensive overview of monotone priority queues, focusing on their evolution and application in shortest path algorithms. Monotone priority queues are characterized by the property that their minimum key does not decrease over time, making them particularly effective for label-setting algorithms like Dijkstra's. Some key data structures within this category are explored, emphasizing those derived directly from Dial's algorithm, including variations of multi-level bucket structures and radix heaps. Theoretical complexities and practical considerations of these structures are discussed, with insights into their development and refinement provided through a historical timeline.},
	urldate = {2024-12-12},
	publisher = {arXiv},
	author = {Costa, Jonas and Castro, Lucas and de Freitas, Rosiane},
	year = {2024},
	note = {Version Number: 2},
	keywords = {Data Structures and Algorithms (cs.DS), FOS: Computer and information sciences},
	annote = {Other
22 pages, 5 figures, 1 table},
}

@report{acar_non-oblivious_2007,
	title = {Non-oblivious retroactive data structures},
	institution = {Technical report, Carnegie Mellon University},
	author = {Acar, Umut A and Blelloch, Guy E and Tangwongsan, Kanat},
	date = {2007},
	file = {Acar et al. - 2007 - Non-oblivious retroactive data structures.pdf:C\:\\Users\\lucas\\Zotero\\storage\\V5FNRSUT\\Acar et al. - 2007 - Non-oblivious retroactive data structures.pdf:application/pdf},
}

@inproceedings{roditty_fully_2004,
	title = {A fully dynamic reachability algorithm for directed graphs with an almost linear update time},
	url = {https://doi.org/10.1145/1007352.1007387},
	doi = {10.1145/1007352.1007387},
	pages = {184--191},
	booktitle = {Proceedings of the 36th Annual {ACM} Symposium on Theory of Computing},
	publisher = {{ACM}, New York},
	author = {Roditty, Liam and Zwick, Uri},
	date = {2004},
	mrnumber = {2121600},
}

@article{jiang_data-driven_2022,
	title = {Data-Driven Optimization for Dynamic Shortest Path Problem Considering Traffic Safety},
	volume = {23},
	rights = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/{IEEE}.html},
	issn = {1524-9050, 1558-0016},
	url = {https://ieeexplore.ieee.org/document/9758634/},
	doi = {10.1109/TITS.2022.3165757},
	pages = {18237--18252},
	number = {10},
	journaltitle = {{IEEE} Transactions on Intelligent Transportation Systems},
	shortjournal = {{IEEE} Trans. Intell. Transport. Syst.},
	author = {Jiang, Shan and Zhang, Yilun and Liu, Ran and Jafari, Mohsen and Kharbeche, Mohamed},
	urldate = {2024-10-21},
	date = {2022-10},
}

@incollection{tjoa_state_2018,
	location = {Cham},
	title = {The State of the Art in Dynamic Graph Algorithms},
	volume = {10706},
	isbn = {978-3-319-73116-2 978-3-319-73117-9},
	url = {http://link.springer.com/10.1007/978-3-319-73117-9_3},
	pages = {40--44},
	booktitle = {{SOFSEM} 2018: Theory and Practice of Computer Science},
	publisher = {Springer International Publishing},
	author = {Henzinger, Monika},
	editor = {Tjoa, A Min and Bellatreche, Ladjel and Biffl, Stefan and Van Leeuwen, Jan and Wiedermann, Jiří},
	urldate = {2024-10-21},
	date = {2018},
	doi = {10.1007/978-3-319-73117-9_3},
	note = {Series Title: Lecture Notes in Computer Science},
}

@article{brown_methodology_1995,
	title = {The Methodology of Mathematics},
	volume = {79},
	rights = {https://www.cambridge.org/core/terms},
	issn = {0025-5572, 2056-6328},
	url = {https://www.cambridge.org/core/product/identifier/S0025557200155275/type/journal_article},
	doi = {10.2307/3618304},
	pages = {321--334},
	number = {485},
	journaltitle = {The Mathematical Gazette},
	shortjournal = {Math. Gaz.},
	author = {Brown, Ronald and Porter, Timothy},
	urldate = {2024-10-22},
	date = {1995-07},
	langid = {english},
	file = {PDF:C\:\\Users\\lucas\\Zotero\\storage\\PKUQNDZA\\Brown e Porter - 1995 - The Methodology of Mathematics.pdf:application/pdf},
}

@article{singh_journal_2021,
	title = {The journal coverage of Web of Science, Scopus and Dimensions: A comparative analysis},
	volume = {126},
	issn = {0138-9130, 1588-2861},
	url = {https://link.springer.com/10.1007/s11192-021-03948-5},
	doi = {10.1007/s11192-021-03948-5},
	shorttitle = {The journal coverage of Web of Science, Scopus and Dimensions},
	pages = {5113--5142},
	number = {6},
	journaltitle = {Scientometrics},
	shortjournal = {Scientometrics},
	author = {Singh, Vivek Kumar and Singh, Prashasti and Karmakar, Mousumi and Leta, Jacqueline and Mayr, Philipp},
	urldate = {2024-10-22},
	date = {2021-06},
	langid = {english},
	file = {Versão submetida:C\:\\Users\\lucas\\Zotero\\storage\\JJB238LD\\Singh et al. - 2021 - The journal coverage of Web of Science, Scopus and Dimensions A comparative analysis.pdf:application/pdf},
}

@inproceedings{driscoll_making_1986,
	location = {Berkeley, California, United States},
	title = {Making data structures persistent},
	isbn = {978-0-89791-193-1},
	url = {http://portal.acm.org/citation.cfm?doid=12130.12142},
	doi = {10.1145/12130.12142},
	eventtitle = {the eighteenth annual {ACM} symposium},
	pages = {109--121},
	booktitle = {Proceedings of the eighteenth annual {ACM} symposium on Theory of computing  - {STOC} '86},
	publisher = {{ACM} Press},
	author = {Driscoll, J R and Sarnak, N and Sleator, D D and Tarjan, R E},
	urldate = {2024-10-22},
	date = {1986},
	langid = {english},
}

@misc{eickhoff_impact_2023,
	title = {Impact Factors for Computer Science Conferences},
	rights = {{arXiv}.org perpetual, non-exclusive license},
	url = {https://arxiv.org/abs/2310.08037},
	doi = {10.48550/ARXIV.2310.08037},
	abstract = {An increasing number of {CS} researchers are employed in academic non-{CS} departments where publication output is measured in terms of journal impact factors. To foster recognition of publications in peer-reviewed {CS} conference proceedings, we analyzed more than 40,000 {CS} publications and computed journal impact factors for 88 top-ranking conferences across a representative range of fields, finding that some conferences have impact factors corresponding to those of high-ranking journals.},
	publisher = {{arXiv}},
	author = {Eickhoff, Carsten},
	urldate = {2024-10-28},
	date = {2023},
	note = {Version Number: 1},
	keywords = {Digital Libraries (cs.{DL}), {FOS}: Computer and information sciences},
}

@misc{haeupler_universal_2023,
	title = {Universal Optimality of Dijkstra via Beyond-Worst-Case Heaps},
	rights = {{arXiv}.org perpetual, non-exclusive license},
	url = {https://arxiv.org/abs/2311.11793},
	doi = {10.48550/ARXIV.2311.11793},
	abstract = {This paper proves that Dijkstra's shortest-path algorithm is universally optimal in both its running time and number of comparisons when combined with a sufficiently efficient heap data structure.
 Universal optimality is a powerful beyond-worst-case performance guarantee for graph algorithms that informally states that a single algorithm performs as well as possible for every single graph topology. We give the first application of this notion to any sequential algorithm.
 We design a new heap data structure with a working-set property guaranteeing that the heap takes advantage of locality in heap operations. Our heap matches the optimal (worst-case) bounds of Fibonacci heaps but also provides the beyond-worst-case guarantee that the cost of extracting the minimum element is merely logarithmic in the number of elements inserted after it instead of logarithmic in the number of all elements in the heap. This makes the extraction of recently added elements cheaper.
 We prove that this working-set property guarantees universal optimality for the problem of ordering vertices by their distance from the source vertex: The sequence of heap operations generated by any run of Dijkstra's algorithm on a fixed graph possesses enough locality that one can couple the number of comparisons performed by any heap with our working-set bound to the minimum number of comparisons required to solve the distance ordering problem on this graph for a worst-case choice of arc lengths.},
	publisher = {{arXiv}},
	author = {Haeupler, Bernhard and Hladík, Richard and Rozhoň, Václav and Tarjan, Robert and Tětek, Jakub},
	urldate = {2024-10-29},
	date = {2023},
	note = {Version Number: 3},
	keywords = {{FOS}: Computer and information sciences, Data Structures and Algorithms (cs.{DS}), F.2.2; G.2.2},
	file = {2311.11793v3:C\:\\Users\\lucas\\Zotero\\storage\\YE6SUVPB\\2311.11793v3.pdf:application/pdf},
}
